/*    **************** Number of Unique Paths "space not optimized"  ********************          */

 //Function to find total number of unique paths.
    int NumberOfPath(int a, int b)
    {
        //space optimized O(n^2) into O(n)
        vector<int>dp(b,1);
        
        //last row ans col is 1 
        
        for(int i=a-2;i>=0;i--)
        for(int j=b-2;j>=0;j--){
            dp[j]+=dp[j+1];
        }
        
        return dp[0];
    }


/*    ************** Number of Unique Paths "space O(n^2) *******************         */
//Function to find total number of unique paths.
    int NumberOfPath(int a, int b)
    {
        //code here
        vector<vector<int>>dp(a,vector<int>(b,1));
        
        //last row ans col is 1 
        
        for(int i=a-2;i>=0;i--)
        for(int j=b-2;j>=0;j--){
            dp[i][j]=dp[i+1][j]+dp[i][j+1];
        }
        
        return dp[0][0];
    }


/*    ************  Unique Paths in a Grid   ***************           */

int uniquePaths(int n, int m, vector<vector<int>> &grid) {
        // code here
        //if staring first row and colum or last row and colum is zero then we couldn't follow path
        if(grid[0][0]==0|| grid[n-1][m-1]==0) return 0;
        
        vector<vector<int>>dp(n,vector<int>(m,0));
        //last row
        for(int r=m-2;r>=0;r--){
            
            
            
            
            
            if(grid[n-1][r]==1){
                dp[n-1][r]=1;
            }
            else break;
        }
        
        //last col
        for(int c=n-2;c>=0;c--){
            if(grid[c][m-1]==1)
            dp[c][m-1]=1;
            else break;
        }
        
        for(int j=n-2;j>=0;j--){
        for(int i=m-2;i>=0;i--){
            if(grid[j][i])
            dp[j][i]=(dp[j+1][i]+dp[j][i+1])%1000000007;
        }
        }
        return dp[0][0];
    }





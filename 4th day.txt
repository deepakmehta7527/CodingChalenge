//search-insert-position

int searchInsert(vector<int>& nums, int target) {
     int start=0;
     int end=nums.size()-1;
     int result=-1;
     while(start<=end){
      int mid=start+(end-start)/2;
      if(target==nums[mid]){
       return mid;
      }
      else if(target<nums[mid]){
           result=mid;
          end=mid-1;
      }
      else {
          result=mid+1;
      start=mid+1;
      }

     }   
    return result;
    }





//left most and right most index

long long firstoccurance(vector<long long> arr, long long x){
        long long start,mid,end,result;
        start=0;
        end=arr.size()-1;
        result=-1;
        while(start<=end){
            mid=start+(end-start)/2;
            if(arr[mid]==x){
                result=mid;
                end=mid-1;
            }
            else if(arr[mid]>x){
                end=mid-1;
            }
            else{
                start=mid+1;
            }
        }
        return result;
    }
    
    long long lastoccurrance(vector<long long> arr, long long x){
        long long start,mid,end,result;
        end=arr.size()-1;
        result=-1;
        start=0;
        while(start<=end){
            mid=start+(end-start)/2;
            if(arr[mid]==x){
                result=mid;
                start=mid+1;
            }
            else if(arr[mid]>x){
                end=mid-1;
            }
            else{
                start=mid+1;
            }
        }
        return result;
    }
    
    
    
    pair<long,long> indexes(vector<long long> v, long long x)
    {
        // code here
         long long leftoccurance=firstoccurance(v,x);
        long  long rightoccurance=lastoccurrance(v,x);
        return {leftoccurance,rightoccurance};
    }

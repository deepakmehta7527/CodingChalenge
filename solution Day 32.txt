  /*returns min element from stack*/
       int getMin(){
           
           //stack top min element will return
           if(s.size()==0)
           return -1;
           else
           return minEle;
           
       }
       
       /*returns poped element from stack*/
       int pop(){
           
           //Write your code here
           if(s.size()==0)
           return -1;
           //original element will pop from stack
           int ans=s.top();
           //convert into original element
           ans=ans%101;
           s.pop();
           if(s.size())
           minEle=s.top()/101;
           return ans;
           
           
           
       }
       
       /*push element x into the stack*/
       void push(int x){
           
           //Write your code here
           if(s.size()==0){
               minEle=x;
               s.push(x+x*101);
           }
           else{
               minEle=min(x,s.top()/101);
               s.push(x+minEle*101);
           }
           
       }



//String Manipulation
  int removeConsecutiveSame(vector <string > v) 
    {
        // Your code goes here
            stack<string>s;
            int i=0;  
        while(i<v.size()){
            //first we checked stack null if null then we put some element
            if(s.size()==0){
            s.push(v[i]);
            }
      else{
          //compare equal then pop from stack
          if(s.top()==v[i])
          s.pop();
          else
          s.push(v[i]); //if not equal then push
      }      
                  
            i++;
        }
        return s.size();
    } 





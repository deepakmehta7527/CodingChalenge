//Bubble sort

 //Function to sort the array using bubble sort algorithm.
    void bubbleSort(int arr[], int n)
    {
        // Your code here 
        for(int i=0;i<n-1;i++){
            //flag condition used to check given set of element already sorted or not 
            //if already sorted then it will take O(n) time complexity
            int flag=0;
            for(int j=0;j<n-i-1;j++){
                if(arr[j]>arr[j+1]){
                    swap(arr[j],arr[j+1]);
                    //if array is not sorted then flag will be 1
                    flag=1;
                }
            }
            //if flag condition zero that means array is already sorted
            if(flag==0) return;
        }
        
    }


//Selection sort


 void selectionSort(int arr[], int n)
    {
       //code here
       for(int i=0;i<n-1;i++){
           //index store minium element
           int index=i;
           for(int j=i;j<=n-1;j++){
               //here compare element which one minimum that will store in index
               if(arr[index]>arr[j])
               index=j;
           }
           //after findout minimum element and then we swap min element with current element 
           swap(arr[index],arr[i]);
       }
    }



//Insertion sort

 void insert(int arr[], int i)
    {
        //code here
    }
     public:
    //Function to sort the array using insertion sort algorithm.
    void insertionSort(int arr[], int n)
    {
        //code here
        for(int i=0;i<n;i++){
            
            int j=i;
            while(j>0 && arr[j-1]>arr[j]){
                int temp=arr[j-1];
                arr[j-1]=arr[j];
                arr[j]=temp;
                   j--;
            }
        }

    }

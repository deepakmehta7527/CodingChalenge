//Rotate image solution

void rotate(vector<vector<int>>& matrix) {
        int n=matrix.size();
        int m=matrix[0].size();
         
         for(int row=0;row<n;row++){
             for(int col=row+1;col<m;col++){
                swap(matrix[row][col],matrix[col][row]);
             }
         }

            for(int row=0;row<n;row++){
             for(int col=0;col<m/2;col++){
                swap(matrix[row][col],matrix[row][m-1-col]);
             }
         }

    }

//Rotate a 2D array

void rotateMatrix(vector<vector<int>>& arr, int n) {
	    // code here   

int row=n;
int col=n;

for(int i=0;i<row-1;i++){
    for(int j=i+1;j<col;j++){
         swap(arr[i][j],arr[j][i]);
    }
   }

int r=n;
int c=n;
   for(int i=0;i<r/2;i++){
    for(int j=0;j<c;j++){
        swap(arr[i][j],arr[c-i-1][j]);
    }
   }
	  
 	   
	   
	}



//Transpose of Matrix
void transpose(vector<vector<int> >& matrix, int n)
    { 
        // code here 
        for(int row=0;row<n-1;row++){
            for(int col=row+1;col<n;col++){
                swap(matrix[row][col],matrix[col][row]);
            }
        }
    }

//search 2d matrix

 bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int row,col,mid,start=0,end=matrix.size()*matrix[0].size()-1;
        while(start<=end){
            mid=end+(start-end)/2;
            row=mid/matrix[0].size();
            col=mid%matrix[0].size();

            if(matrix[row][col]==target)
            return true;
            else if(matrix[row][col]>target)
                end=mid-1;
                else
                start=mid+1;
        }
        return false;
    }
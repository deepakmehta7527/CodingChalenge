//**************Phone directory*************//
class TrieNode{
       public:
       bool isEndofWord;
       TrieNode *child[26];
       
       TrieNode(){
           isEndofWord=0;
           for(int i=0;i<26;i++)
           child[i]=NULL;
       }
   };
   
   class Trie{
       TrieNode *root;
       
       public:
       
       Trie(){
           root=new TrieNode();
       }
       
       void insert(string word){
           TrieNode *node=root;
           for(char c:word){
               int index=c-'a';
               if(node->child[index]==NULL){
                   node->child[index]=new TrieNode();
                   node=node->child[index];
               }
               else{
                   node=node->child[index];
               }
           }
           node->isEndofWord=true;
       }
       
       void findContact(string prefix,TrieNode *node,vector<string>&contact){
           if(node->isEndofWord) contact.push_back(prefix);
           
           for(char c='a';c<='z';c++){
               int index=c-'a';
               if(node->child[index])
               findContact(prefix+c,node->child[index],contact);
           }
       }
       
       vector<string>searchContact(string prefix){
           TrieNode *node=root;
           for(char c:prefix){
               int index=c-'a';
               //prefix doesn't exist
               if(node->child[index]==NULL) return {"0"};
               //exist
               node=node->child[index];
           }
           vector<string>contact;
           findContact(prefix,node,contact);
           return contact;
           
           
       }
   };

    vector<vector<string>>displayContacts(int n, string contact[], string s)
    {
        // code here
        Trie tree;
        for(int i=0;i<n;i++)
        tree.insert(contact[i]);
        
        vector<vector<string>>result;
        string prefix="";
        for(int i=0;i<s.size();i++)
        {
            prefix+=s[i];
            vector<string>contact=tree.searchContact(prefix);
            result.push_back(contact);
        }
        return result;
    }

//***************************Trie(Insert and Search)*********************//
void insert(struct TrieNode *root, string key)
{
    // code here
    TrieNode *node=root;
    for(char c:key){
        int index=c-'a';
        if(node->children[index]==NULL){
            node->children[index]=new TrieNode();
        }
        node=node->children[index];
    }
    node->isLeaf=1;
    
}

//Function to use TRIE data structure and search the given string.
bool search(struct TrieNode *root, string key) 
{
    // code here
    TrieNode *node=root;
    for(char c:key){
        int index=c-'a';
        if(node->children[index]==NULL)
        return 0;
        node=node->children[index];
    }
    return node->isLeaf;
}


//******************************Implemented trie using visual studio*******************************************//

#include<bits/stdc++.h>
using namespace std;

class TrieNode{
  public:
  TrieNode *child[26];
  bool isEndofWorld;

 //constructor
  TrieNode(){
     isEndofWorld=false;
     for(int i=0;i<26;i++)
     child[i]=NULL;
  }
};

class Trie{
  TrieNode *root;

  public:
  Trie(){
    root=new TrieNode();
  }

  //insert
  void insert(string word){
      TrieNode *node=root;
      for(char c:word){
        int index=c-'a';
        if(node->child[index]==NULL){
        node->child[index]=new TrieNode();
        node=node->child[index];
        }
        else{
          node=node->child[index];
        }

      }
      node->isEndofWorld=true;
  }

  //search
  bool search(string word){
      TrieNode *node=root;
      for(char c:word){
          int index=c-'a';
          if(node->child[index]==NULL){
          return 0;
          }
          node=node->child[index];
      }

      return node->isEndofWorld;
  }

   bool isEmpty(TrieNode *node){
    for(int i=0;i<26;i++){
      //child exist not delete
      if(node->child[i])
      return false;
    }
    //child not exist so delete
    return true;
   }

  //Deletion
  bool Delete(TrieNode *node,string word,int depth){
      //Base condition
    if(depth==word.size()){
       //it is not the end of word
       if(node->isEndofWorld==0){
          return false;
       }
       //it is the end of word
       node->isEndofWorld=0;
       //child exist or not
       return isEmpty(node);
    }
    int index=word[depth]-'a';
    //char doesn't exist
    if(node->child[index]==NULL)
    return false;
    //recursive call to delete the char in tree
    bool ShouldDeleteChild=Delete(node->child[index],word,depth+1);

    if(ShouldDeleteChild){
      delete node->child[index];
      node->child[index]=NULL;

      return !node->isEndofWorld && isEmpty(node);
    };

return false;

  }
  void Deleteword(string word){
        Delete(root,word,0);
  }

};

int main(){
Trie *tree=new Trie();
tree->insert("apple");
tree->insert("appex");
tree->insert("almond");
tree->Deleteword("apple");
cout<<"does exist"<<tree->search("appex")<<endl;
return 0;
}











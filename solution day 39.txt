//Queue Reversal 

queue<int> rev(queue<int> q)
    {
        // add code here.
        stack<int>s;
      while(q.size()){
          s.push(q.front());
          q.pop();
      }
      
      while(s.size()){
          q.push(s.top());
          s.pop();
      }
   return q;

    }

//Stack using two queues

void QueueStack :: push(int x)
{
        // Your Code
        q1.push(x);
       
}

//Function to pop an element from stack using two queues. 
int QueueStack :: pop()
{
        
        if(q1.empty()) return -1;
        while(q1.size()!=1){    //if q1 have more then 1 element
            q2.push(q1.front());//q1 will push into q2 
            q1.pop();
        }
        int c=q1.front();  //when condition will false result store
        q1.pop();  
        while(q2.empty()==false){  //q2 is not empty 
            q1.push(q2.front());// then we move q2 into q1
            q2.pop();
        }
        return c;
}


//Function to push an element in queue by using 2 stacks.
void StackQueue :: push(int x)
{
    // Your Code
    s1.push(x);
    
}

//Function to pop an element from queue by using 2 stacks.
int StackQueue :: pop()
{
        // Your Code
        if(s1.empty()&& s2.empty()) return -1;
       if(s2.size()){
            int data=s2.top();
            s2.pop();
            return data;
        }
        while(s1.size()){
            s2.push(s1.top());
            s1.pop();
        }
        int data=s2.top();
        s2.pop();
        return data;
        
        
}


//Time Needed to Buy Tickets


   int timeRequiredToBuy(vector<int>& tickets, int k) {
    
       int n=tickets.size();
       int total=tickets[k];

       for(int i=0;i<k;i++){
           total+=min(tickets[k],tickets[i]);
       }

       for(int i=k+1;i<n;i++)
       total+=min(tickets[k]-1,tickets[i]);



return total;
    }

//Reverse First K elements of Queue

queue<int> modifyQueue(queue<int> q, int k) {
    
    stack<int>s;
    while(q.size()&&k){
        s.push(q.front());
        q.pop();
        k--;
    }
    
    queue<int>res;
    while(s.size()){
        res.push(s.top());
        s.pop();
    }
    
    int rem=q.size()-k;
    int i=0;
    while(q.size() && i<rem){
        int x=q.front();
        q.pop();
        res.push(x);
        i++;
    }
   

    return res;
    
}




